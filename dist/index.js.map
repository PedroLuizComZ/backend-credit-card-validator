{"version":3,"sources":["../src/common/utils/envConfig.ts","../src/server.ts","../src/common/middleware/errorHandler.ts","../src/common/middleware/rateLimiter.ts","../src/common/middleware/requestLogger.ts","../src/modules/credit-card/credit-card.routes.ts","../src/modules/credit-card/credit-card.controller.ts","../src/modules/credit-card/creditCard.schema.ts","../src/common/utils/dateValidator.ts","../src/common/utils/isValidCreditCard.ts","../src/common/utils/handleError.ts","../src/index.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n  NODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n  HOST: host({ devDefault: testOnly(\"localhost\") }),\n  PORT: port({ devDefault: testOnly(3000) }),\n  CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n});\n","import cors from \"cors\";\nimport express, { type Express } from \"express\";\nimport helmet from \"helmet\";\nimport { pino } from \"pino\";\n\nimport errorHandler from \"@/common/middleware/errorHandler\";\nimport rateLimiter from \"@/common/middleware/rateLimiter\";\nimport requestLogger from \"@/common/middleware/requestLogger\";\nimport { env } from \"@/common/utils/envConfig\";\n\nimport creditCardRoutes from \"@/modules/credit-card/credit-card.routes\";\n\nconst logger = pino({ name: \"server start\" });\nconst app: Express = express();\n\n// Set the application to trust the reverse proxy\napp.set(\"trust proxy\", true);\n\n// Middlewares\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cors({ origin: env.CORS_ORIGIN, credentials: true }));\napp.use(helmet());\napp.use(rateLimiter);\n\n// Request logging\napp.use(requestLogger);\n\napp.use(\"/api/credit-card\", creditCardRoutes);\n\n// Error handlers\napp.use(errorHandler());\n\nexport { app, logger };\n","import type { ErrorRequestHandler, RequestHandler } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nconst unexpectedRequest: RequestHandler = (_req, res) => {\n  res.sendStatus(StatusCodes.NOT_FOUND);\n};\n\nconst addErrorToRequestLog: ErrorRequestHandler = (err, _req, res, next) => {\n  res.locals.err = err;\n  next(err);\n};\n\nexport default () => [unexpectedRequest, addErrorToRequestLog];\n","import type { Request } from \"express\";\nimport { rateLimit } from \"express-rate-limit\";\n\nimport { env } from \"@/common/utils/envConfig\";\n\nconst rateLimiter = rateLimit({\n  legacyHeaders: true,\n  limit: env.COMMON_RATE_LIMIT_MAX_REQUESTS,\n  message: \"Too many requests, please try again later.\",\n  standardHeaders: true,\n  windowMs: 15 * 60 * env.COMMON_RATE_LIMIT_WINDOW_MS,\n  keyGenerator: (req: Request) => req.ip as string,\n});\n\nexport default rateLimiter;\n","import { randomUUID } from \"node:crypto\";\nimport type { IncomingMessage, ServerResponse } from \"node:http\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { StatusCodes, getReasonPhrase } from \"http-status-codes\";\nimport type { LevelWithSilent } from \"pino\";\nimport { type CustomAttributeKeys, type Options, pinoHttp } from \"pino-http\";\n\nimport { env } from \"@/common/utils/envConfig\";\n\nenum LogLevel {\n  Fatal = \"fatal\",\n  Error = \"error\",\n  Warn = \"warn\",\n  Info = \"info\",\n  Debug = \"debug\",\n  Trace = \"trace\",\n  Silent = \"silent\",\n}\n\ntype PinoCustomProps = {\n  request: Request;\n  response: Response;\n  error: Error;\n  responseBody: unknown;\n};\n\nconst requestLogger = (options?: Options): RequestHandler[] => {\n  const pinoOptions: Options = {\n    enabled: env.isProduction,\n    customProps: customProps as unknown as Options[\"customProps\"],\n    redact: [],\n    genReqId,\n    customLogLevel,\n    customSuccessMessage,\n    customReceivedMessage: (req) => `request received: ${req.method}`,\n    customErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\n    customAttributeKeys,\n    ...options,\n  };\n  return [responseBodyMiddleware, pinoHttp(pinoOptions)];\n};\n\nconst customAttributeKeys: CustomAttributeKeys = {\n  req: \"request\",\n  res: \"response\",\n  err: \"error\",\n  responseTime: \"timeTaken\",\n};\n\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\n  request: req,\n  response: res,\n  error: res.locals.err,\n  responseBody: res.locals.responseBody,\n});\n\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\n  const isNotProduction = !env.isProduction;\n  if (isNotProduction) {\n    const originalSend = res.send;\n    res.send = (content) => {\n      res.locals.responseBody = content;\n      res.send = originalSend;\n      return originalSend.call(res, content);\n    };\n  }\n  next();\n};\n\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\n  if (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\n  if (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\n  if (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\n  return LogLevel.Info;\n};\n\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  if (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\n  return `${req.method} completed`;\n};\n\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  const existingID = req.id ?? req.headers[\"x-request-id\"];\n  if (existingID) return existingID;\n  const id = randomUUID();\n  res.setHeader(\"X-Request-Id\", id);\n  return id;\n};\n\nexport default requestLogger();\n","import express from \"express\";\nimport creditCardController from \"./credit-card.controller\";\n\nconst router = express.Router();\n\nrouter.post(\"/validate-card\", creditCardController.validateCard);\n\nexport default router;","import { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { creditCardSchema } from \"./creditCard.schema\";\nimport { isValidCreditCard } from \"@/common/utils/isValidCreditCard\";\nimport { handleError } from \"@/common/utils/handleError\";\n\nclass CreditCardController {\n  async validateCard(req: Request, res: Response) {\n    try {\n      const { error, value } = creditCardSchema.validate(req.body);\n      if (error) {\n        return res\n          .status(StatusCodes.BAD_REQUEST)\n          .json({ error: error.details[0].message });\n      }\n\n      const { cardNumber, cardHolder, expiryDate, cvv } = value;\n\n      const isValid = isValidCreditCard(cardNumber);\n      if (!isValid) {\n        return res.status(StatusCodes.BAD_REQUEST).json({\n          error: \"Invalid card number\",\n        });\n      }\n\n      res.json({\n        valid: isValid,\n        cardNumber,\n        cardHolder,\n        expiryDate,\n        cvv,\n      });\n    } catch (error) {\n      handleError(res, error);\n    }\n  }\n}\n\nexport default new CreditCardController();","import Joi from \"joi\";\nimport { isValidExpiryDate } from \"@/common/utils/dateValidator\";\n\nexport const creditCardSchema = Joi.object({\n  cardNumber: Joi.string()\n    .pattern(/^\\d{16}$/)\n    .required()\n    .messages({\n      \"string.pattern.base\": \"Card number must be 16 digits\",\n      \"any.required\": \"Card number is required\",\n    }),\n  cardHolder: Joi.string()\n    .min(3)\n    .max(50)\n    .required()\n    .messages({\n      \"string.min\": \"Card holder name must be at least 3 characters\",\n      \"string.max\": \"Card holder name must be at most 50 characters\",\n      \"any.required\": \"Card holder name is required\",\n    }),\n  expiryDate: Joi.string()\n    .pattern(/^(0[1-9]|1[0-2])\\/\\d{2}$/) \n    .custom((value, helpers) => {\n      if (!isValidExpiryDate(value)) {\n        return helpers.error(\"any.invalid\", {\n          message: \"Expiry date is invalid or in the past\",\n        });\n      }\n      return value;\n    })\n    .required()\n    .messages({\n      \"string.pattern.base\": \"Expiry date must be in the format MM/YY\",\n      \"any.required\": \"Expiry date is required\",\n      \"any.invalid\": \"Expiry date is invalid or in the past\",\n    }),\n  cvv: Joi.string()\n    .pattern(/^\\d{3,4}$/)\n    .required()\n    .messages({\n      \"string.pattern.base\": \"CVV must be 3 or 4 digits\",\n      \"any.required\": \"CVV is required\",\n    }),\n});","export const isValidExpiryDate = (expiryDate: string): boolean => {\n    const [month, year] = expiryDate.split(\"/\");\n  \n    const monthNumber = parseInt(month, 10);\n    if (monthNumber < 1 || monthNumber > 12) {\n      return false;\n    }\n  \n    const currentYear = new Date().getFullYear() % 100; \n    const yearNumber = parseInt(year, 10);\n  \n    if (yearNumber < currentYear) {\n      return false; \n    }\n  \n    return true;\n  };","export const isValidCreditCard = (cardNumber: string): boolean => {\n  if (cardNumber === \"\") return false;\n  const digits = cardNumber.replace(/\\D/g, \"\").split(\"\").map(Number).reverse();\n  const sum = digits.reduce((acc, digit, idx) => {\n    if (idx % 2 === 1) {\n      const doubled = digit * 2;\n      return acc + (doubled > 9 ? doubled - 9 : doubled);\n    }\n    return acc + digit;\n  }, 0);\n  return sum % 10 === 0;\n};\n","import type { Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport function handleError(res: Response, error: unknown) {\n  if (error instanceof Error) {\n    res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n  } else {\n    res.status(StatusCodes.BAD_REQUEST).json({ error: \"An unexpected error occurred.\" });\n  }\n}\n","import { env } from \"@/common/utils/envConfig\";\nimport { app, logger } from \"@/server\";\n\nconst server = app.listen(env.PORT, () => {\n  const { NODE_ENV, HOST, PORT } = env;\n  logger.info(`Server (${NODE_ENV}) running on port http://${HOST}:${PORT}`);\n});\n\nconst onCloseSignal = () => {\n  logger.info(\"sigint received, shutting down\");\n  server.close(() => {\n    logger.info(\"server closed\");\n    process.exit();\n  });\n  setTimeout(() => process.exit(1), 10000).unref(); // Force shutdown after 10s\n};\n\nprocess.on(\"SIGINT\", onCloseSignal);\nprocess.on(\"SIGTERM\", onCloseSignal);\n"],"mappings":"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","names":["dotenv","import_express","import_http_status_codes","import_http_status_codes","Joi","import_http_status_codes","express","express","cors","helmet"]}